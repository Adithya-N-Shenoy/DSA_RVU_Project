#include <stdio.h>
#include <stdlib.h>
#include <unistd.h> // for sleep()

#define SIZE 4

char* directions[] = {"North", "South", "East", "West"};
int traffic[SIZE];       // Holds number of vehicles
int front = 0;           // Circular pointer

void inputTraffic() {
    printf("\nEnter number of vehicles at each direction:\n");
    for (int i = 0; i < SIZE; i++) {
        printf("%s: ", directions[i]);
        scanf("%d", &traffic[i]);
    }
}

void displayTraffic() {
    printf("\nCurrent Traffic Status:\n");
    for (int i = 0; i < SIZE; i++) {
        printf("%s: %d vehicles\n", directions[i], traffic[i]);
    }
}

void simulateCircularTraffic() {
    int cycle = 0;
    int maxCycles = 10;

    while (cycle < maxCycles) {
        int current = front % SIZE;

        if (traffic[current] > 0) {
            printf("\nüîò Green light for %s (Vehicles: %d)\n", directions[current], traffic[current]);
            int greenTime = traffic[current] / 2;
            printf("‚è≥ Estimated duration: %d seconds\n", greenTime);
            sleep(1); // Simulated delay

            // Clear vehicles
            traffic[current] = 0;
        } else {
            printf("\n‚õî %s has no vehicles. Skipping...\n", directions[current]);
        }

        front = (front + 1) % SIZE; // Circular move
        cycle++;
    }
}

int main() {
    int choice;
    do {
        printf("\n=== Smart Traffic Controller (Circular Queue) ===\n");
        printf("1. Input Traffic\n2. Display Traffic\n3. Run Controller\n4. Exit\n");
        printf("Enter choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1: inputTraffic(); break;
            case 2: displayTraffic(); break;
            case 3: simulateCircularTraffic(); break;
            case 4: printf("Exiting...\n"); break;
            default: printf("Invalid choice!\n");
        }
    } while (choice != 4);

    return 0;
}
